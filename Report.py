#  –ó–∞–≤–¥–∞–Ω–Ω—è: –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤ —É –º–∞–≥–∞–∑–∏–Ω—ñ
# –£ —Ç–µ–±–µ —î –ø–∞—Ä–∫–µ—Ç-—Ñ–∞–π–ª (sales.parquet), –¥–µ –º—ñ—Å—Ç—è—Ç—å—Å—è –¥–∞–Ω—ñ –ø—Ä–æ –ø—Ä–æ–¥–∞–∂—ñ:
#
# order_id	customer_id	date	product	price	quantity
# 1	101	2024-02-01	Laptop	1200	1
# 2	102	2024-02-01	Phone	800	2
# 3	101	2024-02-02	Mouse	50	3
# 4	103	2024-02-02	Monitor	300	1
# 5	102	2024-02-03	Keyboard	100	2
# 6	104	2024-02-03	Phone	800	1
# üéØ –¢–≤–æ—ó –∑–∞–¥–∞—á—ñ:
# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ sales.parquet –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é pl.scan_parquet().
# –û–±—á–∏—Å–ª–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ (total_revenue = price * quantity).
# –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π —Ç–æ–≤–∞—Ä (—è–∫–∏–π –∫—É–ø–∏–ª–∏ –Ω–∞–π–±—ñ–ª—å—à–µ —Ä–∞–∑—ñ–≤).
# –ó–Ω–∞–π—Ç–∏ —Ç–æ–ø-3 –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏.
# –ì—Ä—É–ø—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –ø–æ –¥–Ω—è—Ö —ñ –∑–Ω–∞–π—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –¥–µ–Ω–Ω–∏–π –¥–æ—Ö—ñ–¥.
# –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É JSON.


import polars as pl
import os
import json

from _pytest.reports import BaseReport


# class SalesAnalysis:
#     def __init__(self, file_path:str):
#         self.file_path = file_path
#         self.df = None
#
#
#     def load_date(self):
#         # self.df = pl.scan_parquet(self.file_path)
#         data = {"a":[1,2,3], "b":["1","2", "3"], "c":[4,5,6]}
#         df = pl.DataFrame(data, schema=[("a", pl.Float32), ("b", pl.Utf8), ("c", pl.Int64)])
#         return df
#
#
#     def calculate_total_product(self):
#         self.df = self.df.with_colums(
#             pl.col("price") * pl.col("quantity")).alias("total_revenue")
#
#     def get_most_popular_product(self):
#         popular_product = (
#             self.df.group_by("product")
#             .agg(pl.sum("quantity").alias("total_sold"))
#             .sort("total_sold", descending=True)
#             .limit(1)
#             .collect()
#         )
#         return popular_product.to_dicts()


# –ó–∞–≤–¥–∞–Ω–Ω—è: –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤ —É –º–µ—Ä–µ–∂—ñ –º–∞–≥–∞–∑–∏–Ω—ñ–≤
# –£—è–≤—ñ–º–æ, —â–æ —Ç–∏ –ø—Ä–∞—Ü—é—î—à –∑ –º–µ—Ä–µ–∂–µ—é –º–∞–≥–∞–∑–∏–Ω—ñ–≤, —ñ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–æ–¥–∞–∂—ñ –ø–æ –º—ñ—Å—Ç–∞—Ö —ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö —Ç–æ–≤–∞—Ä—ñ–≤.
#
# üîπ –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ (sales.parquet) ‚Äì —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–∂–µ–Ω –ø—Ä–æ–¥–∞–∂:
#
# order_id	customer_id	store_city	date	category	product	price	quantity	discount
# 1	101	Kyiv	2024-02-01	Electronics	Laptop	1200	1	0.05
# 2	102	Lviv	2024-02-01	Electronics	Phone	800	2	0.10
# 3	101	Kyiv	2024-02-02	Accessories	Mouse	50	3	0.00
# 4	103	Odesa	2024-02-02	Electronics	Monitor	300	1	0.07
# 5	102	Lviv	2024-02-03	Accessories	Keyboard	100	2	0.05
# 6	104	Dnipro	2024-02-03	Electronics	Phone	800	1	0.15
# üéØ –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏:
# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ (load_data()).
# –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –¥–æ—Ö—ñ–¥ (total_revenue = (price - discount) * quantity).
# –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—à–µ –º—ñ—Å—Ç–æ (–¥–µ –Ω–∞–π–±—ñ–ª—å—à–∏–π –¥–æ—Ö—ñ–¥).
# –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤ (–∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø—Ä–æ–¥–∞–∂—ñ–≤).
# –¢–æ–ø-5 –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏.
# –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—é –∑–Ω–∏–∂–∫—É –ø–æ –∫–æ–∂–Ω–æ–º—É –º—ñ—Å—Ç—É.
# –ì—Ä—É–ø—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –ø–æ –¥–Ω—è—Ö —Ç–∞ –º—ñ—Å—Ç–∞—Ö.
# –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ JSON-–∑–≤—ñ—Ç.
# –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É CSV —ñ Excel.


# class AnalysisProduct:
#     def __init__(self, file_path: str):
#         self.file_path = file_path
#         self.df = None
#
#     def load_date(self):
#         self.df = pl.scan_parquet(self.file_path)
#         return self
#
#     def calculate(self):
#         total_revenue = self.df.with_colums(
#             (pl.col("price") - pl.col("discount")) * pl.col("quantity"))
#
#
#     def most_profitable_city(self):
#         msf = self.df.group_by("store_city").


# if __name__ == "__main__":
#     data = SalesAnalysis("asd")
#     df = data.load_date()
#     ...